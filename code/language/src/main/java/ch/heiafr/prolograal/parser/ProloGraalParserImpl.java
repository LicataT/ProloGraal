package ch.heiafr.prolograal.parser;

import ch.heiafr.prolograal.runtime.ProloGraalClause;
import ch.heiafr.prolograal.runtime.ProloGraalQuery;
import com.oracle.truffle.api.source.Source;

import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import ch.heiafr.prolograal.ProloGraalLanguage;
import ch.heiafr.prolograal.runtime.ProloGraalRuntime;

import java.util.List;

/**
 * Class handling the parsing process using the "listener" method and the classes generated by ANTLR4.
 * @see ProloGraalListenerImpl
 * @see ProloGraalParseError
 * @see ProloGraalRuntime
 * @see ProloGraalLanguage
 * @author Martin Spoto
 */
public class ProloGraalParserImpl {
   static Source source;

   // syntax error handler
   private static final class BailoutErrorListener extends BaseErrorListener {
      private final Source source;

      BailoutErrorListener(Source source) {
         this.source = source;
      }

      @Override
      public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine,
                              String msg, RecognitionException e) {
         throwParseError(source, line, charPositionInLine, (Token) offendingSymbol, msg);
      }
   }

   /**
    * Convenience method used to format and throw a new parsing error.
    * @throws ProloGraalParseError Exception containing details on the parsing error.
    */
   static void throwParseError(Source source, int line, int charPositionInLine, Token token, String message) throws ProloGraalParseError {
      int col = charPositionInLine + 1;
      String location = "-- line " + line + " col " + col + ": ";
      int length = token == null ? 1 : Math.max(token.getStopIndex() - token.getStartIndex(), 0);
      throw new ProloGraalParseError(source, line, col, length,
              String.format("Error(s) parsing script:%n" + location + message));
   }

   /**
    * Parse the given source file using the listener method.
    * @return The list of clauses in the source file, in the order in which they are encountered.
    */
   public static List<ProloGraalQuery> parseProloGraal(Source source) {
      ProloGraalLexer lexer = new ProloGraalLexer(CharStreams.fromString(source.getCharacters().toString()));
      ProloGraalParser parser = new ProloGraalParser(new CommonTokenStream(lexer));

      lexer.removeErrorListeners();
      parser.removeErrorListeners();

      BailoutErrorListener errListener = new BailoutErrorListener(source);
      lexer.addErrorListener(errListener);
      parser.addErrorListener(errListener);

      ProloGraalParserImpl.source = source;
      ParseTree tree = parser.prolograal();

      // create our listener implementation
      ProloGraalListenerImpl listener = new ProloGraalListenerImpl();
      listener.setParsingClauses(false);
      // and walk through it using the default walker
      ParseTreeWalker.DEFAULT.walk(listener, tree);

      if (ProloGraalLanguage.DEBUG_MODE) {
         listener.debug();
      }

      return listener.getQueries();
   }

   /**
    * Parse the given source file using the listener method.
    * @return The list of clauses in the source file, in the order in which they are encountered.
    */
   public static List<ProloGraalClause> parseClauses(Source source) {
      ProloGraalLexer lexer = new ProloGraalLexer(CharStreams.fromString(source.getCharacters().toString()));
      ProloGraalParser parser = new ProloGraalParser(new CommonTokenStream(lexer));

      lexer.removeErrorListeners();
      parser.removeErrorListeners();

      BailoutErrorListener errListener = new BailoutErrorListener(source);
      lexer.addErrorListener(errListener);
      parser.addErrorListener(errListener);

      ProloGraalParserImpl.source = source;
      ParseTree tree = parser.prolograal();

      // create our listener implementation
      ProloGraalListenerImpl listener = new ProloGraalListenerImpl();
      listener.setParsingClauses(true);
      // and walk through it using the default walker
      ParseTreeWalker.DEFAULT.walk(listener, tree);

      if (ProloGraalLanguage.DEBUG_MODE) {
         listener.debug();
      }

      return listener.getClauses();
   }
}